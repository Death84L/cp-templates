// Max XOR queries with 2 pointer and binary search
// Online Queries
// 2 pointer and binary search

class Solution
{
public:
  vector<int> maximizeXor(vector<int> &nums, vector<vector<int>> &queries)
  {
    const int n = nums.size(), q = queries.size();
    vector<int> ans(q, -1);
    sort(nums.begin(), nums.end());

    for (int i = 0; i < q; i++)
    {
      const int x = queries[i][0], m = queries[i][1];
      if (m < nums[0])
        continue;

      int end = upper_bound(nums.begin(), nums.end(), m) - nums.begin();
      int start = 0;

      int k = 0, cur = 0;
      for (int bit = 31; bit >= 0; bit--)
      {
        if (x & (1 << bit))
        { // hope A[i] this bit == 0
          if (!(nums[start] & (1 << bit)))
          {
            k |= 1 << bit;
            end = lower_bound(nums.begin() + start, nums.begin() + end, cur | (1 << bit)) - nums.begin();
          }
          else
          {
            cur |= 1 << bit;
          }
        }
        else
        { // hope: A[i] this bit == 1
          if (start <= end - 1 && (nums[end - 1] & (1 << bit)))
          {
            k |= 1 << bit;
            cur |= 1 << bit;
            start = lower_bound(nums.begin() + start, nums.begin() + end, cur) - nums.begin();
          }
        }
      }
      ans[i] = k;
    }
    return ans;
  }
};

// With offline queries
// same logic as finding max xor from 2 elements in array just sort queries
// in increasing order of m and insert in trie accordingly and you are done
struct TrieNode
{
  TrieNode *children[2];
};
TrieNode *root;
void initialize(TrieNode *node)
{
  node->children[0] = NULL;
  node->children[1] = NULL;
}
void insert(int val)
{
  TrieNode *temp = root;
  for (int i = 30; i >= 0; i--)
  {
    if (val & (1 << i))
    {
      if (temp->children[1] == NULL)
      {
        TrieNode *node = new TrieNode;
        initialize(node);
        temp->children[1] = node;
      }
      temp = temp->children[1];
    }
    else
    {
      if (temp->children[0] == NULL)
      {
        TrieNode *node = new TrieNode;
        initialize(node);
        temp->children[0] = node;
      }
      temp = temp->children[0];
    }
  }
}
int findmax(int val)
{
  int sum = 0;
  TrieNode *temp = root;
  for (int i = 30; i >= 0; i--)
  {
    if (val & (1 << i))
    {
      if (temp->children[0] != NULL)
      {
        sum += (1 << i);
        temp = temp->children[0];
      }
      else
        temp = temp->children[1];
    }
    else
    {
      if (temp->children[1] != NULL)
      {
        sum += (1 << i);
        temp = temp->children[1];
      }
      else
        temp = temp->children[0];
    }
  }
  return sum;
}
class Solution
{
public:
  vector<int> maximizeXor(vector<int> &nums, vector<vector<int>> &queries)
  {
    root = new TrieNode;
    initialize(root);
    sort(nums.begin(), nums.end());
    for (int i = 0; i < queries.size(); i++)
    {
      swap(queries[i][0], queries[i][1]);
      queries[i].push_back(i);
    }
    sort(queries.begin(), queries.end());
    vector<int> ans(queries.size());
    int j = 0;
    for (int i = 0; i < queries.size(); i++)
    {
      while (j < nums.size() && nums[j] <= queries[i][0])
        insert(nums[j]), j++;
      ans[queries[i][2]] = -1;
      if (j == 0)
      {
        if (queries[i][1] == 0)
          ans[queries[i][2]] = 0;
        else
          ans[queries[i][2]] = -1;
      }
      else
        ans[queries[i][2]] = findmax(queries[i][1]);
    }
    return ans;
  }
};
